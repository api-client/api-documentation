/* eslint-disable no-param-reassign */
import { AuthorizationMethodElement as AuthorizationMethod } from '@advanced-rest-client/authorization';
import {
  normalizeType,
  METHOD_OAUTH2,
  METHOD_OAUTH1,
} from '@advanced-rest-client/authorization/src/Utils.js';
import {
  serializeOauth2Auth,
} from '@advanced-rest-client/authorization/src/Oauth2MethodMixin.js';
import {
  CustomMethodMixin,
  initializeCustomModel,
  renderCustom,
  validateCustom,
  serializeCustom,
  restoreCustom,
  updateQueryParameterCustom,
  updateHeaderCustom,
  clearCustom,
} from './mixins/CustomMethodMixin.js';
import {
  PassThroughMethodMixin,
  renderPassThrough,
  initializePassThroughModel,
  restorePassThrough,
  serializePassThrough,
  validatePassThrough,
  updateQueryParameterPassThrough,
  updateHeaderPassThrough,
  clearPassThrough,
} from './mixins/PassThroughMethodMixin.js';
import {
  ApiOauth1MethodMixin,
  initializeOauth1Model,
} from './mixins/ApiOauth1MethodMixin.js';
import {
  ApiOauth2MethodMixin,
  initializeOauth2Model,
} from './mixins/ApiOauth2MethodMixin.js';
import styles from './styles/AuthorizationMethod.js';
import {
  ApiKeyMethodMixin,
  initializeApiKeyModel,
  validateApiKey,
  serializeApiKey,
  restoreApiKey,
  renderApiKey,
  updateQueryParameterApiKey,
  updateHeaderApiKey,
  updateCookieApiKey,
  clearApiKey,
} from './mixins/ApiKeyMethodMixin.js';

export const METHOD_CUSTOM = 'custom';
export const METHOD_PASS_THROUGH = 'pass through';
export const METHOD_API_KEY = 'api key';

export default class AmfAuthorizationMethodElement extends ApiOauth2MethodMixin(ApiOauth1MethodMixin(CustomMethodMixin(PassThroughMethodMixin(ApiKeyMethodMixin(AuthorizationMethod))))) {

  // @ts-ignore
  get styles() {
    return [
      super.styles,
      styles,
    ];
  }

  static get properties() {
    return {
      /**
       * A security model generated by the AMF parser.
       */
      security: { type: Object },
      /**
       * When set the "description" of the security definition is rendered.
       */
      descriptionOpened: { type: Boolean },
      /**
       * Used by the OAuth 2 type. 
       * When set it overrides the `authorizationUri` in the authorization editor,
       * regardless to the authorization scheme applied to the request.
       * This is to be used with the mocking service.
       */
      overrideAuthorizationUri: { type: String },
      /** 
       * Used by the OAuth 2 type. 
       * When set it overrides the `authorizationUri` in the authorization editor,
       * regardless to the authorization scheme applied to the request.
       * This is to be used with the mocking service.
       */
      overrideAccessTokenUri: { type: String },
    };
  }

  disconnectedCallback() {
    super.disconnectedCallback();
  }

  updated(changed) {
    super.updated(changed);
    if (changed.has('security') || changed.has('type')) {
      this._processSecurity();
    }
  }

  _processSecurity() {
    const type = normalizeType(this.type);
    switch (type) {
      case METHOD_CUSTOM: this[initializeCustomModel](); break;
      case METHOD_OAUTH2: this[initializeOauth2Model](); break;
      case METHOD_OAUTH1: this[initializeOauth1Model](); break;
      case METHOD_PASS_THROUGH: this[initializePassThroughModel](); break;
      case METHOD_API_KEY: this[initializeApiKeyModel](); break;
      default:
    }
  }

  /**
   * Toggles value of `descriptionOpened` property.
   *
   * This is a utility method for UI event handling. Use `descriptionOpened`
   * attribute directly instead of this method.
   */
  toggleDescription() {
    this.descriptionOpened = !this.descriptionOpened;
  }

  /**
   * Validates current method.
   * @return {boolean}
   */
  validate() {
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM: return this[validateCustom]();
      case METHOD_PASS_THROUGH: return this[validatePassThrough]();
      case METHOD_API_KEY: return this[validateApiKey]();
      default: return super.validate();
    }
  }

  /**
   * Clears settings of currently selected method.
   */
  clear() {
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM: this[clearCustom](); break;
      case METHOD_PASS_THROUGH: this[clearPassThrough](); break;
      case METHOD_API_KEY: this[clearApiKey](); break;
      default: super.clear(); break;
    }
  }

  /**
   * Creates a settings object with user provided data for current method.
   *
   * @return {Object} User provided data
   */
  serialize() {
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM: return this[serializeCustom]();
      case METHOD_OAUTH2: return this[serializeOauth2Auth]();
      case METHOD_PASS_THROUGH: return this[serializePassThrough]();
      case METHOD_API_KEY: return this[serializeApiKey]();
      default: return super.serialize();
    }
  }

  /**
   * Restores previously serialized settings.
   * A method type must be selected before calling this function.
   *
   * @param {any} settings Depends on current type.
   * @return {any}
   */
  restore(settings) {
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM: return this[restoreCustom](settings);
      case METHOD_PASS_THROUGH: return this[restorePassThrough](settings);
      case METHOD_API_KEY: return this[restoreApiKey](settings);
      default: return super.restore(settings);
    }
  }

  // @ts-ignore
  render() {
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM: return this[renderCustom]();
      case METHOD_PASS_THROUGH: return this[renderPassThrough]();
      case METHOD_API_KEY: return this[renderApiKey]();
      default: return super.render();
    }
  }

  /**
   * Updates, if applicable, query parameter value.
   * This is supported for RAML custom scheme and Pass Through
   * that operates on query parameters model which is only an internal
   * model.
   *
   * This does nothing if the query parameter has not been defined for current
   * scheme.
   *
   * @param {string} name The name of the changed parameter
   * @param {string} newValue A value to apply. May be empty but must be defined.
   */
  updateQueryParameter(name, newValue) {
    if (newValue === null || newValue === undefined) {
      newValue = '';
    }
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM:
        this[updateQueryParameterCustom](name, newValue);
        break;
      case METHOD_PASS_THROUGH:
        this[updateQueryParameterPassThrough](name, newValue);
        break;
      case METHOD_API_KEY:
        this[updateQueryParameterApiKey](name, newValue);
        break;
      default:
    }
  }

  /**
   * Updates, if applicable, header value.
   * This is supported for RAML custom scheme and Pass Through
   * that operates on headers model which is only an internal model.
   *
   * This does nothing if the header has not been defined for current
   * scheme.
   *
   * @param {string} name The name of the changed header
   * @param {string} newValue A value to apply. May be empty but must be defined.
   */
  updateHeader(name, newValue) {
    if (newValue === null || newValue === undefined) {
      newValue = '';
    }
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_CUSTOM:
        this[updateHeaderCustom](name, newValue);
        break;
      case METHOD_PASS_THROUGH:
        this[updateHeaderPassThrough](name, newValue);
        break;
      case METHOD_API_KEY:
        this[updateHeaderApiKey](name, newValue);
        break;
      default:
    }
  }

  /**
   * Updates, if applicable, cookie value.
   * This is supported in OAS' Api Key.
   *
   * This does nothing if the cookie has not been defined for current
   * scheme.
   *
   * @param {string} name The name of the changed cookie
   * @param {string} newValue A value to apply. May be empty but must be defined.
   */
  updateCookie(name, newValue) {
    if (newValue === null || newValue === undefined) {
      newValue = '';
    }
    const type = normalizeType(this.type);
    switch(type) {
      case METHOD_API_KEY:
        this[updateCookieApiKey](name, newValue);
        break;
      default:
    }
  }
}
