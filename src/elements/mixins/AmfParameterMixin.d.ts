import { SupportedInputTypes } from '@anypoint-web-components/anypoint-input';
import { ApiAnyShape, ApiArrayShape, ApiParameterRecursive, ApiScalarShape, ApiShapeUnion, ApiTupleShape, ApiUnionShape } from '@api-client/amf-store';
import { TemplateResult } from 'lit-element';
import { OperationParameter, ShapeTemplateOptions } from '../../types';

export const addArrayValueHandler: unique symbol;
export const readInputValue: unique symbol;
export const paramChangeHandler: unique symbol;
export const booleanHandler: unique symbol;
export const deleteParamHandler: unique symbol;
export const enumSelectionHandler: unique symbol;
export const nilHandler: unique symbol;
export const nilValues: unique symbol;
export const parametersValue: unique symbol;
export const parameterTemplate: unique symbol;
export const parameterSchemaTemplate: unique symbol;
export const scalarShapeTemplate: unique symbol;
export const nodeShapeTemplate: unique symbol;
export const unionShapeTemplate: unique symbol;
export const fileShapeTemplate: unique symbol;
export const schemaShapeTemplate: unique symbol;
export const arrayShapeTemplate: unique symbol;
export const tupleShapeTemplate: unique symbol;
export const anyShapeTemplate: unique symbol;
export const enumTemplate: unique symbol;
export const booleanTemplate: unique symbol;
export const nillInputTemplate: unique symbol;
export const textInputTemplate: unique symbol;
export const addArrayItemTemplate: unique symbol;
export const deleteParamTemplate: unique symbol;

export declare function AmfParameterMixin<T extends new (...args: any[]) => {}>(base: T): T & AmfParameterMixinConstructor;

interface AmfParameterMixinConstructor {
  new(...args: any[]): AmfParameterMixin;
  constructor(...args: any[]): AmfParameterMixin;
}

/**
 * This mixin adds support for rendering operation parameter inputs.
 * It support:
 * - rendering inputs
 * - caching user input
 * - restoring cache input.
 */
export declare interface AmfParameterMixin {
  /**
   * By default the element stores user input in a map that is associated with the specific
   * instance of this element. This way the element can be used multiple times in the same document.
   * However, this way parameter values generated by the generators or entered by the user won't 
   * get populated in different operations.
   * 
   * By setting this value the element prefers a global cache for values. Once the user enter
   * a value it is registered in the global cache and restored when the same parameter is used again.
   * 
   * Do not use this option when the element is embedded multiple times in the page. It will result
   * in generating request data from the cache and not what's in the form inputs and these may not be in sync.
   * 
   * These values are stored in memory only. Listen to the `change` event to learn that something changed.
   * @attribute;
   */
  globalCache: boolean;
  [parametersValue]: OperationParameter[];
  [nilValues]: string[];

  connectedCallback(): void;

  [addArrayValueHandler](e: Event): void;

  /**
   * Reads the value to be set on an input.
   * 
   * @param isArray Whether the value should be read for an array.
   * @returns The value to set on the input. Note, it is not cast to the type.
   */
  [readInputValue](parameter: ApiParameterRecursive, schema: ApiScalarShape, isArray?: boolean): any;
  [paramChangeHandler](e: Event): void;
  [booleanHandler](e: Event): void;
  /**
   * A handler for the remove param button click.
   */
  [deleteParamHandler](e: Event): void;
  [enumSelectionHandler](e: Event): void;
  /**
   * Handler for the nil value toggle.
   */
  [nilHandler](e: Event): void;
  /**
   * @returns The template for the request parameter form control.
   */
  [parameterTemplate](param: OperationParameter): TemplateResult | string;

  /**
   * @returns The template for the request parameter form control.
   */
  [parameterSchemaTemplate](parameter: ApiParameterRecursive, schema: ApiShapeUnion, opts?: ShapeTemplateOptions): TemplateResult | string;

  /**
   * @returns The template for the schema parameter.
   */
  [scalarShapeTemplate](parameter: ApiParameterRecursive, schema: ApiScalarShape, opts?: ShapeTemplateOptions): TemplateResult | string;

  /**
   * @return A template for an input form item for the given type and schema
   */
  [textInputTemplate](parameter: ApiParameterRecursive, schema: ApiScalarShape, type?: SupportedInputTypes, opts?: ShapeTemplateOptions): TemplateResult;

  /**
   * @param paramId The ApiParameter id.
   * @param arrayIndex When this is an array item, the index on the array.
   * @returns The template for the param remove button. 
   */
  [deleteParamTemplate](paramId: string, arrayIndex?: number): TemplateResult;

  /**
   * @returns The template for the enum input.
   */
  [enumTemplate](parameter: ApiParameterRecursive, schema: ApiScalarShape, opts?: ShapeTemplateOptions): TemplateResult;

  /**
   * @returns The template for the checkbox input.
   */
  [booleanTemplate](parameter: ApiParameterRecursive, schema: ApiScalarShape, opts?: ShapeTemplateOptions): TemplateResult;

  /**
   * @returns The template for the nil checkbox input.
   */
  [nillInputTemplate](parameter: ApiParameterRecursive): TemplateResult;

  /**
   * or now we do not support union shapes. There's no way to learn how to serialize
   * the Node shape to a string.
   * @returns The template for the node shape.
   */
  [nodeShapeTemplate](): TemplateResult | string;

  /**
   * @returns The template for the union shape.
   */
  [unionShapeTemplate](parameter: ApiParameterRecursive, schema: ApiUnionShape): TemplateResult | string;

  /**
   * This situation makes not sense as there's no mechanism to describe how to 
   * put a file into a path, query, or headers.
   * @returns The template for the file shape.
   */
  [fileShapeTemplate](): TemplateResult | string;

  /**
   * For now we do not support union shapes. There's no way to learn how to serialize
   * the Schema shape to a string.
   * @returns The template for the schema shape.
   */
  [schemaShapeTemplate](): TemplateResult | string;

  /**
   * @returns The template for the array shape.
   */
  [arrayShapeTemplate](parameter: ApiParameterRecursive, schema: ApiArrayShape): TemplateResult | string;

  /**
   * @returns The template for the tuple shape.
   */
  [tupleShapeTemplate](parameter: ApiParameterRecursive, schema: ApiTupleShape): TemplateResult | string;

  /**
   * @returns The template for the Any shape.
   */
  [anyShapeTemplate](parameter: ApiParameterRecursive, schema: ApiAnyShape): TemplateResult | string;

  /**
   * @param {string} id The id of the parameter to add the value to.
   * @returns The template for the adding an array item button
   */
  [addArrayItemTemplate](id: string): TemplateResult;
}
