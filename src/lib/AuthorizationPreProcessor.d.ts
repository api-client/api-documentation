/* eslint-disable no-plusplus */
/* eslint-disable class-methods-use-this */
import { ArcHeaders } from '@advanced-rest-client/arc-headers';
import { ApiKeyAuthorization, BasicAuthorization, OAuth2Authorization, PassThroughAuthorization, RamlCustomAuthorization } from '@advanced-rest-client/arc-types/src/authorization/Authorization';
import { ArcBaseRequest } from '@advanced-rest-client/arc-types/src/request/ArcRequest';
import { UrlParser } from '@advanced-rest-client/arc-url';
import { AuthPreProcessorOptions } from '../types';

/** @typedef {import('@advanced-rest-client/arc-types').ArcRequest.ArcBaseRequest} ArcBaseRequest */
/** @typedef {import('@advanced-rest-client/arc-types').Authorization.BasicAuthorization} BasicAuthorization */
/** @typedef {import('@advanced-rest-client/arc-types').Authorization.PassThroughAuthorization} PassThroughAuthorization */
/** @typedef {import('@advanced-rest-client/arc-types').Authorization.RamlCustomAuthorization} RamlCustomAuthorization */
/** @typedef {import('@advanced-rest-client/arc-types').Authorization.OAuth2Authorization} OAuth2Authorization */
/** @typedef {import('@advanced-rest-client/arc-types').Authorization.ApiKeyAuthorization} ApiKeyAuthorization */
/** @typedef {import('../types').AuthPreProcessorOptions} AuthPreProcessorOptions */

/**
 * A class that applies authorization values generated by the HTTP editor, that can be 
 * applied before sending it to the HTTP factory.
 * 
 * These are the headers and query parameters defined by the security scheme.
 * 
 * Other methods like NTLM have to be processed by the HTTP factory when negotiating the connection.
 */
export declare class AuthorizationPreProcessor {
  /**
   * @returns A shallow copy of the request object.
   */
  apply(request: ArcBaseRequest, opts?: AuthPreProcessorOptions): ArcBaseRequest;

  /**
   * Applies basic authorization scheme to the request.
   * It changes the request's headers.
   */
  addBasic(headers: ArcHeaders, config: BasicAuthorization): void;

  /**
   * Applies basic authorization scheme to the request.
   * It changes the request's headers and query parameters.
   */
  addPassThrough(headers: ArcHeaders, parser: UrlParser, config: PassThroughAuthorization): void;

  /**
   * Applies RAML custom authorization scheme to the request.
   * It changes the request's headers and query parameters.
   */
  addCustom(headers: ArcHeaders, parser: UrlParser, config: RamlCustomAuthorization): void;

  /**
   * Applies OAuth 2 authorization scheme to the request.
   * It changes the request's headers and query parameters.
   */
  addOAuth2(headers: ArcHeaders, parser: UrlParser, config: OAuth2Authorization): void;

  /**
   * Applies OAS' API key authorization scheme to the request.
   * It changes the request's headers and query parameters.
   */
  addApiKey(headers: ArcHeaders, parser: UrlParser, config: ApiKeyAuthorization): void;
}
